{"version":3,"sources":["store/redusers/user.js","store/redusers/game.js","store/redusers/multiplayerGame.js","store/redusers/index.js","pages/Main.js","store/actions/auth.js","pages/components/AuthForm.js","pages/Auth.js","pages/components/NavBar/NavBar.js","store/actions/signup.js","store/configureStore.js","pages/components/RegForm/RegForm.js","pages/Register.js","pages/components/GameArea/GameArea.js","store/actions/game.js","pages/Game.js","pages/components/CoopGameArea/CoopGameArea.js","store/actions/multiplayerGame.js","pages/MultiplayerGame.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isAuth","isFailed","checkingUser","signUpSuccess","userData","error","gameState","isLoaded","isLoading","data","waitingForOpponent","dataIsLoading","gameDataLoaded","playerReady","gameScore","gamers","opponent","winner","combineReducers","gameData","state","arguments","length","undefined","action","type","Object","objectSpread","payload","userStatus","score","multiplayerGameStatus","MainPage","react_default","a","createElement","className","Component","gql","GraphQLClient","headers","authFailed","getUserScore","_callee3","id","res","regenerator_default","wrap","_context3","prev","next","request","sent","abrupt","getUserData","t0","console","log","stop","AuthForm","handleSubmit","e","preventDefault","_this","props","form","validateFields","_ref","asyncToGenerator","mark","_callee","err","values","_context","userAuth","username","password","message","history","goBack","_x","_x2","apply","this","getFieldDecorator","es_form","onSubmit","Item","rules","required","input","prefix","icon","style","color","placeholder","es_button","htmlType","disabled","block","react_router_dom","to","connect","dispatch","user","_res$userAuth","token","localStorage","setItem","jwtDecode","withRouter","AuthPage","react_router","MainAuthForm","create","NavBar","collapsed","handleClick","setState","checkToken","_this$props","layout","Header","width","menu","mode","theme","selectable","lineHeight","key","float","cursor","onClick","logOut","removeItem","_ref2","_callee2","_context2","userId","RegForm","confirmDirty","validateFieldsAndScroll","userSignup","success","push","handleConfirmBlur","value","target","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","assign","labelCol","xs","span","sm","wrapperCol","label","hasFeedback","validator","Password","onBlur","tooltip","title","whitespace","offset","nickname","email","createUser","RegPage","MainRegForm","socket","GameArea","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","answered","componentWillMount","getMovieData","checkTheAnswer","answer","movies","find","item","btnAnswer","name","background","borderColor","updateScore","correctButton","document","getElementsByClassName","mdb_id","toString","nextQuestion","io","disconnect","_this2","fontSize","concat","imageURL","map","display","emit","GamePage","components_GameArea_GameArea","CoopGameArea","playerScore","nextMovie","gamerWinner","Fragment","opponentWinner","drawResult","on","getPlayersList","gotInvite","movieData","gotaWinner","globalScoreUpdate","canceledGame","exitGame","draw","gameNumber","margin","readyForGame","removeOpponent","size","nick","ready","waiting","visibility","invitePlayer","getDataSuccess","MultiGamePage","components_CoopGameArea_CoopGameArea","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","subscribe","getState","App","es","components_NavBar_NavBar","from","exact","path","component","MultiplayerGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.74581d26.chunk.js","sourcesContent":["const initialState = {\n    isAuth: false,\n    isFailed: false,\n    checkingUser: false,\n    signUpSuccess: false,\n    userData: {},\n    error: null\n}\n\nexport function userStatus(state = initialState, action){\n    switch (action.type) {\n        case 'CHECKING_USER':\n            return {\n                ...state,\n                isFailed: false,\n                checkingUser: true\n            };\n        case 'USER_IS_AUTH':\n            return{\n                ...state,\n                checkingUser: false,\n                isAuth: true,\n                isFailed: false,\n                error: null,\n                userData: action.payload\n            }\n        case 'AUTH_FAILED':\n            return{\n                ...state,\n                checkingUser: false,\n                isFailed: true,\n                error: action.payload\n            }\n        case 'REG_COMPLETE':\n            return{\n                ...state,\n                isFailed: false,\n                checkingUser: false,\n                signUpSuccess: true,\n                error: null\n            }\n        case 'SCORE_UPDATED':\n            return{\n                ...state,\n                userData: {\n                    ...state.userData,\n                    score: action.payload\n                } \n            }\n        case 'LOG_OUT':\n            return initialState\n        default:\n            return state\n    }\n}\n","const gameState = {\n    isLoaded: false,\n    isLoading: false,\n    data: {},\n  }\nexport function gameData(state = gameState, action) {\n    switch (action.type) {\n        case 'GET_DATA':\n            return {\n                ...state,\n                isLoading: true,\n                isLoaded: false\n            };\n        case 'GET_DATA_SUCCESS':\n            return {\n                isLoading: false,\n                isLoaded: true,\n                data: action.payload\n            }\n        case 'EXIT_GAME' || 'LOG_OUT':\n            return gameState\n        default:\n            return state;\n    }\n}","const initialState ={\n    waitingForOpponent : false,\n    dataIsLoading: false,\n    gameDataLoaded : false,\n    playerReady: false,\n    gameScore: 0,\n    gamers : null,\n    opponent : null,\n    winner : null,\n    data : null    \n}\nexport function multiplayerGameStatus(state = initialState, action) {\n    switch (action.type) {\n        case 'GET_PLAYERS_LIST':\n            return{\n                ...state,\n                gamers: action.payload\n            }\n        case 'WAITING_FOR_OPPONENT':\n            return {\n                ...state,\n                waitingForOpponent: true,\n            }\n        case 'GOT_OPPONENT':\n            return {\n                ...state,\n                waitingForOpponent: false,\n                opponent: action.payload\n            }\n        case 'OPPONENST_SCORE_UPDATE':\n            return {\n                ...state,\n                opponent: {\n                    ...state.opponent,\n                    score: action.payload\n                }\n            }\n        case 'PLAYER_READY':\n            return {\n                ...state,\n                playerReady: true\n            }\n        case 'GET_DATA':\n            return {\n                ...state,\n                dataIsLoading: true,\n                gameDataLoaded: false\n            };\n        case 'UPDATE_SCORE':\n            return{\n                ...state,\n                gameScore: action.payload\n            }\n        case 'DATA_SUCCESS':\n            return {\n                ...state,\n                waitingForOpponent: false,\n                dataIsLoading: false,\n                gameDataLoaded: true,\n                data: action.payload\n            }\n        case 'GOT_A_WINNER': \n            return {\n                ...state,\n                winner: action.payload\n            }\n        case 'REMOVE_OPPONENT':\n            return {\n                ...state,\n                opponent: null\n            }\n        case 'GAME_CANCELED':\n            return {\n                ...state,\n                waitingForOpponent: false,\n                playerReady: false,\n                opponent: null\n            }\n        case 'EXIT_GAME' || 'LOG_OUT':\n            return initialState\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport { userStatus } from \"./user\"\nimport { gameData } from \"./game\"\nimport { multiplayerGameStatus } from './multiplayerGame'\n\nexport default combineReducers({\n    gameData,\n    userStatus,\n    multiplayerGameStatus\n})","import React, { Component } from 'react'\n\nclass MainPage extends Component{\n    render(){\n        return(\n            <div className=\"wrapper\">\n                <h1 className=\"main-logo\">Know Your Movie</h1>\n            </div>\n        )\n    }\n}\n\nexport default MainPage","import { GraphQLClient } from 'graphql-request'\nimport jwtDecode from 'jwt-decode'\n\nconst gql = new GraphQLClient(\"http://localhost:8000/graphql\", {headers: {}})\n\nfunction checkUser() {\n    return {\n        type: 'CHECKING_USER'\n    };\n}\nfunction authFailed(payload) {\n    return {\n        type: 'AUTH_FAILED',\n        payload\n    };\n}\nfunction userData(payload) {\n    return {\n        type: 'USER_IS_AUTH',\n        payload\n    }\n}\nfunction logOutUser(){\n    return {\n        type: 'LOG_OUT'\n    }\n}\n\nexport function userAuth(user, password) {\n    return async (dispatch) => {\n        try {\n            dispatch(checkUser())\n            let res = await gql.request(`query Auth($user: String!, $password: String!){\n                userAuth(user: $user, password: $password){\n                  token\n                  score\n                  error\n                }\n              }`,{user, password})\n            let { error, token, score } = res.userAuth\n            if (error){\n                dispatch(authFailed(error))\n                return\n            }\n            localStorage.setItem('token', token)\n            let data = {...jwtDecode(token), score}\n            dispatch(userData(data))\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n}\nexport function checkToken(){\n    return async (dispatch) => {\n        dispatch(checkUser())\n        \n        if(!localStorage.token){\n            dispatch(authFailed())\n            return\n        }\n        let data = jwtDecode(localStorage.token)\n        let score = await getUserScore(data.userId)\n        dispatch(userData({...data, score}))\n\n    }\n}\nasync function getUserScore(id){\n    try{\n        let res =  await gql.request(`query Score($id: Int!){\n            getUserData(id: $id){\n              score\n            }\n          }`,{id})\n        return res.getUserData.score\n    }\n    catch(err){\n        console.log(err);\n    }    \n}\nexport function logOut(){\n    return (dispatch) => {\n        dispatch(logOutUser())\n        localStorage.removeItem('token')\n    }\n}","import React, { Component } from 'react'\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { userAuth } from '../../store/actions/auth';\nimport { withRouter } from 'react-router-dom' \n\n\nclass AuthForm extends Component{\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields( async (err, values) => {\n          if (!err) {\n            await this.props.userAuth(values.username, values.password)\n            if(this.props.isFailed && this.props.error){\n              message.error(this.props.error, 1.5)\n            }\n            if(this.props.isAuth){\n              this.props.history.goBack()\n            }\n          }\n        });\n      };\n    render(){\n        \n        const { getFieldDecorator } = this.props.form\n        const { checkingUser } = this.props\n        return(\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <Form.Item>\n          {getFieldDecorator('username', {\n            rules: [{ required: true, message: 'Please input your username!'}],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"Username\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>        \n          <Button type=\"primary\" htmlType=\"submit\" disabled={checkingUser} className=\"login-form-button\" block={true}>\n            Log in {checkingUser? <Icon type=\"loading\" /> : null}\n          </Button>\n          Or <NavLink to=\"/signup\">register now!</NavLink>\n        </Form.Item>\n      </Form>\n    );\n        \n    }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.userStatus.isAuth,\n    isFailed: state.userStatus.isFailed,\n    error: state.userStatus.error,\n    checkingUser: state.userStatus.checkingUser\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    userAuth: (user, password) => dispatch(userAuth(user, password))\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(AuthForm))","import React, { Component } from 'react'\nimport AuthForm from './components/AuthForm'\nimport { Form } from 'antd'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nclass AuthPage extends Component{\n    \n    render(){\n        const { isAuth } = this.props\n        if (isAuth) {\n            return <Redirect to=\"/main\" />\n        }\n        const MainAuthForm = Form.create()(AuthForm)\n        return(\n           <div className=\"wrapper\">\n               <h1>Sign In</h1>\n               <MainAuthForm />\n           </div>\n    );\n        \n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth\n    }\n  }\n \nexport default connect(mapStateToProps)(AuthPage)","import React, { Component } from 'react'\nimport { Menu, Button, Layout } from 'antd'\nimport { NavLink } from 'react-router-dom' \nimport { connect } from 'react-redux'\nimport './NavBar.css'\nimport { logOut, checkToken } from '../../../store/actions/auth'\n// const { SubMenu } = Menu\nclass NavBar extends Component{\n    state = {\n        collapsed: false,\n    }\n    componentDidMount(){\n        this.props.checkToken()\n    }\n    handleClick = e => {\n        console.log('click ', e);\n        this.setState({\n            collapsed: !this.state.collapsed,\n        })\n    }\n    render(){\n        const { isAuth, userData } = this.props\n        return(\n\n                <Layout.Header style={ { width: '100%'}}>\n                <Menu mode=\"horizontal\" theme=\"dark\" selectable = {false} style={{ lineHeight: '64px' }}>\n                    <Menu.Item key=\"main\" className=\"logo\">\n                        <NavLink to=\"/\">Know Your Movie</NavLink>\n                    </Menu.Item>\n                    <Menu.Item key=\"single-game\">\n                        <NavLink to=\"/single-game\">Single Game</NavLink>\n                    </Menu.Item>\n                    <Menu.Item key=\"multiplayer-game\">\n                        <NavLink to=\"/multiplayer-game\">Multiplayer Game</NavLink>\n                    </Menu.Item>\n                {isAuth ? \n                    <Menu.Item key=\"user\" className=\"user-auth\" style={{float: \"right\", cursor: \"default\"}}>\n                        {userData.username} : <span className=\"user-score\">{userData.score}</span>\n                        <Button onClick={this.props.logOut} type=\"primary\">\n                              Log Out\n                        </Button>\n                    </Menu.Item>\n                    :\n                    <Menu.Item key=\"auth\" style={{float: 'right'}}>\n                        <NavLink to=\"/auth\">Log In</NavLink>\n                    </Menu.Item>\n                }\n                </Menu>\n                </Layout.Header>\n\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth,\n      userData: state.userStatus.userData\n    }\n  }\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      logOut: () => dispatch(logOut()),\n      checkToken: () => dispatch(checkToken())\n    }\n  }\n  export default connect(mapStateToProps,mapDispatchToProps)(NavBar)","import { GraphQLClient } from 'graphql-request'\n\nconst gql = new GraphQLClient(\"http://localhost:8000/graphql\", {headers: {}})\n\nfunction checkUser() {\n    return {\n        type: 'CHECKING_USER'\n    };\n}\nfunction authFailed(payload) {\n    return {\n        type: 'AUTH_FAILED',\n        payload\n    };\n}\nfunction signupComplete() {\n    return {\n        type: 'REG_COMPLETE'\n    };\n}\n\nexport function userSignup(nickname, password, email){\n    return async (dispatch) => {\n        try {\n            dispatch(checkUser())\n            let res = await gql.request(`mutation CreateUser($nickname: String!, $password: String!, $email: String!) {\n                createUser(user: $nickname, password: $password, email: $email) {\n                  user\n                  error\n                }\n              }`, {nickname, password, email})\n            let {error} = res.createUser\n            if(error){\n                dispatch(authFailed(error))\n                return\n            }\n            dispatch(signupComplete())\n        }\n        catch(err){\n            console.log(err)\n        }\n    }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\"\nimport rootReducer from \"./redusers\"\nimport { composeWithDevTools }  from 'redux-devtools-extension'\n\nexport default function configureStore(initialState){\n    return createStore( \n        rootReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunk))\n        \n    )\n}","import React, { Component } from 'react'\nimport { Form, Icon, Input, Button, Tooltip, message } from 'antd';\nimport { withRouter } from 'react-router-dom' \nimport { connect } from 'react-redux'\nimport \"./RegForm.css\"\nimport { userSignup } from '../../../store/actions/signup'\n\nclass RegForm extends Component{\n    state = {\n        confirmDirty: false\n    };\n    componentWillMount(){\n        if(this.props.isAuth){\n          this.props.history.push('/main')\n        }\n    }\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll(async (err, values) => {\n          if (!err) {\n            console.log('Received values of form: ', values);\n            await this.props.userSignup(values)\n            if(this.props.isFailed){\n                message.error(this.props.error, 1.5)\n            }\n            if(this.props.signUpSuccess){\n                message.success('Registration Succsess')\n                this.props.history.push('/main')\n            }\n          }\n        });\n    };\n    handleConfirmBlur = e => {\n        const value = e.target.value;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('password')) {\n          callback('Two passwords that you enter is inconsistent!');\n        } else {\n          callback();\n        }\n    };\n    \n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n          form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n    render(){\n        const { getFieldDecorator } = this.props.form;\n        const { checkingUser } = this.props\n        const formItemLayout = {\n            labelCol: {\n              xs: { span: 24 },\n              sm: { span: 8 },\n            },\n            wrapperCol: {\n              xs: { span: 24 },\n              sm: { span: 16 },\n            },\n          };\n          const tailFormItemLayout = {\n            wrapperCol: {\n              xs: {\n                span: 24,\n                offset: 0,\n              },\n              sm: {\n                span: 16,\n                offset: 8,\n              },\n            },\n          };\n        return(\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"reg-form\">\n                <Form.Item label=\"E-mail\">\n                    {getFieldDecorator('email', {\n                        rules: [\n                        {\n                            type: 'email',\n                            message: 'The input is not valid E-mail!',\n                        },\n                        {\n                            required: true,\n                            message: 'Please input your E-mail!',\n                        },\n                        ],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                        {\n                            required: true,\n                            message: 'Please input your password!',\n                        },\n                        {\n                            validator: this.validateToNextPassword,\n                        },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        {\n                            validator: this.compareToFirstPassword,\n                        },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item\n                    label={\n                        <span>\n                        Nickname&nbsp;\n                        <Tooltip title=\"What do you want others to call you?\">\n                            <Icon type=\"question-circle-o\" />\n                        </Tooltip>\n                        </span>\n                    }\n                    >\n                    {getFieldDecorator('nickname', {\n                        rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" disabled={checkingUser} htmlType=\"submit\">\n                        Register {checkingUser? <Icon type=\"loading\" /> : null}\n                    </Button>\n                </Form.Item>\n            </Form>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth,\n      isFailed: state.userStatus.isFailed,\n      error: state.userStatus.error,\n      checkingUser: state.userStatus.checkingUser,\n      signUpSuccess: state.userStatus.signUpSuccess\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      userSignup: ({nickname, password, email}) => dispatch(userSignup(nickname, password, email))\n    }\n}\n  \nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(RegForm))\n","import React, { Component } from 'react'\nimport { Form } from 'antd'\nimport RegForm from './components/RegForm/RegForm';\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nclass RegPage extends Component{\n    \n    render(){\n        const { isAuth } = this.props\n        if (isAuth) {\n            return <Redirect to=\"/main\" />\n        }\n        const MainRegForm = Form.create()(RegForm)\n        return(\n            <div className=\"wrapper\">\n                <h1>The Registration Page</h1>\n                <MainRegForm />\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth\n    }\n  }\n \nexport default connect(mapStateToProps)(RegPage)","import React, { Component } from 'react'\nimport { Button, Icon } from 'antd'\nimport './GameArea.css'\nimport { connect } from 'react-redux'\nimport { getMovieData, updateScore } from '../../../store/actions/game'\nimport io from 'socket.io-client'\nlet socket = null\nclass GameArea extends Component{\n    constructor(props){\n        super(props)\n        socket = io.connect('http://localhost:8000')\n    }\n    state = {\n        answered: false\n    }\n    componentWillMount = () => {\n        this.props.getMovieData(socket)\n    }\n    componentWillUnmount() {\n        socket.disconnect()\n    }\n    checkTheAnswer = (e) => {\n        this.setState({\n            answered: true\n        })\n        \n        let answer = this.props.gameData.movies.find((item) => item.answer === true)\n        let btnAnswer = e.target.style\n        if(answer.title === e.target.name){        \n            btnAnswer.background = \"#179317\"\n            btnAnswer.borderColor = \"green\"\n            this.props.updateScore(this.props.userId, socket)\n        }\n        else{\n            btnAnswer.background = \"#ef2f2f\"\n            btnAnswer.borderColor = \"red\"\n            let correctButton = document.getElementsByClassName(answer.mdb_id.toString())\n            correctButton[0].style.background = \"#179317\"\n            correctButton[0].style.borderColor = \"green\"\n        }\n    }\n    nextQuestion = (e) => {\n        this.setState({\n            answered: false\n        })\n        this.props.getMovieData(socket)\n    }\n    \n    render(){\n        const { isLoading, isLoaded, gameData } = this.props\n        if (isLoading) return <div><Icon type=\"loading\" style={{fontSize: \"50px\", color: \"#00305e\"}} /></div>\n        if (!isLoaded || !gameData) return null\n        \n        return(\n            <article className=\"game-area\">\n                <h1>Choose the correct movie title</h1>\n                <div className=\"game-img\" style={{background : `url(\"${gameData.imageURL}\") no-repeat`}} /> \n                <div className=\"button-answers\">\n                    {gameData.movies.map((item)=> \n                        <Button \n                            type=\"primary\" \n                            disabled={this.state.answered} \n                            key={item.mdb_id}\n                            className={item.mdb_id.toString()}\n                            name={item.title} \n                            onClick={this.checkTheAnswer}> \n                            {item.title}\n                        </Button>\n                    )}\n                </div>\n                <Button style={{display: this.state.answered ? \"block\" : \"none\" }} onClick={this.nextQuestion} className=\"next-button\" >Next</Button>\n            </article>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      gameData: state.gameData.data,\n      isLoading: state.gameData.isLoading,\n      isLoaded: state.gameData.isLoaded,\n      userId: state.userStatus.userData.userId,\n      username: state.userStatus.userData.username\n    }\n  }\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      getMovieData: (socket) => dispatch(getMovieData(socket)),\n      updateScore: (userId, socket) => dispatch(updateScore(userId, socket))\n      \n\n    }\n  }\n\n  export default connect(mapStateToProps,mapDispatchToProps)(GameArea)","const gameData = () => ({\n        type: 'GET_DATA'\n})\nconst gameDataSuccsess = (payload) => ({\n        type: 'GET_DATA_SUCCESS',\n        payload\n})\nconst scoreUpdated = (payload) => ({\n        type: 'SCORE_UPDATED',\n        payload\n})\nexport const updateScore = (userId, socket) => {\n    return (dispatch) => {\n        socket.emit('updateScore', userId, (data) => dispatch(scoreUpdated(data)))\n    }\n}\n\nexport const getMovieData = (socket) => {\n    return (dispatch) => {\n        dispatch(gameData())\n        socket.emit('getGame', (data) => dispatch(gameDataSuccsess(data)))\n    }\n}","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport GameArea from './components/GameArea/GameArea';\n\nclass GamePage extends Component{ \n    render(){\n        const { isAuth } = this.props\n        if (!isAuth) {\n            return <Redirect to=\"/auth\" />\n        }\n        return(\n                <div className=\"wrapper\">\n                    <GameArea />\n                </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth\n    }\n  }\n \nexport default connect(mapStateToProps)(GamePage)","import React, { Component } from 'react'\nimport { Button, Icon } from 'antd'\nimport './CoopGameArea.css'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom' \nimport { \n    getPlayersList, \n    invitePlayer, \n    gotInvite, \n    readyForGame, \n    exitGame, \n    gameData, \n    nextMovie, \n    updateScore, \n    gotaWinner,\n    globalScoreUpdate,\n    removeOpponent,\n    canceledGame } from '../../../store/actions/multiplayerGame'\nimport io from 'socket.io-client'\nlet socket = null\n\nclass CoopGameArea extends Component{\n    constructor(props){\n        super(props)\n        socket = io.connect('http://localhost:8000')\n        socket.emit('multiConnect', {username: this.props.username, userId: this.props.userId})\n\n        socket.on('gamers', (data) => this.props.getPlayersList(data))\n\n        socket.on('gotInvite', (data) => this.props.gotInvite(data))\n\n        socket.on('getGameTask', (data) => this.props.movieData(data))\n\n        socket.on('gotaWinner', (data) => this.props.gotaWinner(data))\n\n        socket.on('updateUserScore', (data) => this.props.globalScoreUpdate(data))\n\n        socket.on('opponentCanceled', () => this.props.canceledGame())\n    }\n    state = {\n        answered: false\n    }\n    componentWillUnmount() {\n        socket.disconnect()\n        this.props.exitGame()\n    }\n    checkTheAnswer = (e) => {\n        this.setState({\n            answered: true\n        })\n        let answer = this.props.gameData.movies.find((item) => item.answer === true)\n        let btnAnswer = e.target.style\n        if(answer.title === e.target.name){        \n            btnAnswer.background = \"#179317\"\n            btnAnswer.borderColor = \"green\"\n            btnAnswer.color = \"white\"            \n            this.props.updateScore(this.props.playerScore + 10)\n        }\n        else{\n            btnAnswer.background = \"#ef2f2f\"\n            btnAnswer.borderColor = \"red\"\n            btnAnswer.color = \"white\"\n            let correctButton = document.getElementsByClassName(answer.mdb_id.toString())[0]\n            correctButton.style.background = \"#179317\"\n            correctButton.style.borderColor = \"green\"\n            correctButton.style.color = \"white\"\n            this.props.updateScore(this.props.playerScore - 5)\n        }\n    }\n    nextQuestion = (e) => {\n        this.setState({\n            answered: false\n        })\n        this.props.nextMovie(socket, this.props.playerScore)\n    }\n    gamerWinner = () => (\n        <>\n            <h1>Congratulations!</h1> <p>You are a winner! You got a 200 points.</p>\n        </>\n    )\n    opponentWinner = (props) => (\n        <>\n            <h1>{props.opponent} is a winner</h1> <p>Better luck next time =(</p>\n        </>\n    )\n    drawResult = () => (\n        <>\n            <h1>Its draw</h1><p>Both got a 100 points.</p>\n        </>\n    )\n\n    render(){\n        const { gamers, opponent, playerReady, gameData, dataIsLoading, waitingForOpponent, username, playerScore, winner } = this.props\n        \n        if(!gamers) return <div><Icon type=\"loading\" style={{fontSize: \"50px\", color: \"#00305e\"}} /></div>\n        \n        if(playerReady && opponent && !gameData) return <div><Icon type=\"loading\" style={{fontSize: \"50px\", color: \"#00305e\"}} /></div>\n        \n        if(winner) return (\n            <article className=\"game-area\">\n                {winner.draw ? <this.drawResult /> : \n                    winner.username === username ? <this.gamerWinner /> : \n                        <this.opponentWinner opponent = {opponent.username}/>\n                }\n                <Button type=\"primary\" onClick={() => this.props.history.push('/main')}>Main menu</Button>\n            </article>\n        )\n        \n        if(playerReady && opponent && gameData) return (\n                <article className=\"game-area\">\n                    <div className=\"game-info\">\n                        <div><p>Your score:</p><p style={{fontSize: \"20px\"}}>{playerScore}</p></div>\n                        <div><p>Game</p> <p style={{fontSize: \"20px\"}}>{gameData.gameNumber} of 10</p></div>\n                        <div><p>{opponent.username}</p><p style={{fontSize: \"20px\"}}>{opponent.score}</p></div>\n                    </div>\n                    {dataIsLoading ? <Icon type=\"loading\" style={{fontSize: \"50px\", color: \"#00305e\"}} /> : \n                        <>\n                            <div className=\"game-img\" style={{background : `url(\"${gameData.imageURL}\") 50% 50% no-repeat`}} /> \n                            <div className=\"button-answers\">\n                                {gameData.movies.map((item)=> \n                                    <Button \n                                        type=\"primary\" \n                                        disabled={this.state.answered || waitingForOpponent} \n                                        key={item.mdb_id}\n                                        className={item.mdb_id.toString()}\n                                        name={item.title} \n                                        onClick={this.checkTheAnswer}> \n                                        {item.title}\n                                    </Button>\n                                )}\n                            </div>\n                        </>\n                    }\n                    <Button \n                        type=\"primary\" \n                        style={{cursor: \"pointer\", display: this.state.answered || waitingForOpponent ? \"block\" : \"none\" }}\n                        disabled={waitingForOpponent} \n                        onClick={this.nextQuestion} \n                        className=\"next-button\" >\n                            {waitingForOpponent ? \"Waiting for opponent answer...\" : \"Next\"}\n                    </Button>\n                </article>\n            )\n        \n        return(\n            <article className=\"gamers-list\">\n                <h2>Choose your opponent</h2>\n                {opponent? \n                    <div style={{margin: \"5px\"}} >\n                        <Button \n                            type=\"primary\" \n                            onClick={() => this.props.readyForGame(socket)}>\n                                Accept {opponent.username}\n                        </Button>\n                        <Button \n                            type=\"primary\" \n                            style={{float: \"right\"}} \n                            onClick={() => this.props.removeOpponent(socket)}>\n                                Dismiss\n                        </Button>\n                    </div> : null\n                }\n                {waitingForOpponent? \n                    <div>\n                        <span>Waiting for opponent...</span>\n                        <Button \n                            type=\"primary\" \n                            size={\"small\"} \n                            style={{float: \"right\"}} \n                            onClick={() => this.props.removeOpponent(socket)}>\n                                Cancel\n                        </Button>\n                    </div> : null\n                }\n                {gamers.length === 1? <div>There are no players online </div> : \n                    gamers.map(item => \n                        <div key={item.userId} style={{display: item.nick === username? \"none\" : \"block\" }}>{item.nick} \n                            <Button \n                                type=\"primary\" \n                                disabled={item.ready || waitingForOpponent || opponent || item.waiting} \n                                style={{float: \"right\", visibility: item.nick === username ? \"hidden\": \"visible\", cursor: \"pointer\"}} \n                                size={\"small\"} \n                                onClick={() => this.props.invitePlayer(socket, item.id)}>\n                                    Invite\n                            </Button>\n                        </div>\n                    )\n                }\n            </article>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      gamers: state.multiplayerGameStatus.gamers,\n      opponent: state.multiplayerGameStatus.opponent,\n      userId: state.userStatus.userData.userId,\n      username: state.userStatus.userData.username,\n      playerReady: state.multiplayerGameStatus.playerReady,\n      dataIsLoading: state.multiplayerGameStatus.dataIsLoading,\n      gameData: state.multiplayerGameStatus.data,\n      waitingForOpponent: state.multiplayerGameStatus.waitingForOpponent,\n      playerScore: state.multiplayerGameStatus.gameScore,\n      winner: state.multiplayerGameStatus.winner\n    }\n  }\n  const mapDispatchToProps = (dispatch) => {\n    return {\n      getPlayersList: (data) => dispatch(getPlayersList(data)),\n      invitePlayer: (socket, opponent) => dispatch(invitePlayer(socket, opponent)),\n      gotInvite: (data) => dispatch(gotInvite(data)),\n      readyForGame: (socket) => dispatch(readyForGame(socket)),\n      exitGame: () => dispatch(exitGame()),\n      movieData: (data) => dispatch(gameData(data)),\n      nextMovie: (socket, data) => dispatch(nextMovie(socket, data)),\n      updateScore: ( data) => dispatch(updateScore( data)),\n      gotaWinner: (data) => dispatch(gotaWinner(data)),\n      globalScoreUpdate: (data) => dispatch(globalScoreUpdate(data)),\n      removeOpponent: (socket) => dispatch(removeOpponent(socket)),\n      canceledGame: () => dispatch(canceledGame())\n        \n    }\n  }\n\n  export default connect(mapStateToProps,mapDispatchToProps)(withRouter(CoopGameArea))\n","const waitForOpponent = () => ({type: 'WAITING_FOR_OPPONENT'})\n\nconst gotOpponent = (payload) => ({type: 'GOT_OPPONENT', payload})\n\nconst getData = () => ({type: 'GET_DATA'})\n\nconst opponentCanceled = () => ({type: 'GAME_CANCELED'})\n\nconst playerReady = () => ({type: 'PLAYER_READY'})\n\nconst clearOpponent = () => ({type: 'REMOVE_OPPONENT'})\n\nconst updOpponentsScore = (payload) => ({type: 'OPPONENST_SCORE_UPDATE', payload})\n\nconst winner = (payload) => ({type: 'GOT_A_WINNER', payload})\n\nconst getDataSuccess = (payload) => ({type: 'DATA_SUCCESS',payload})\n\nconst sessionScoreUpdate = (payload) => ({type: 'UPDATE_SCORE', payload})\n\nconst scoreUpdate = (payload) => ({type: 'SCORE_UPDATED', payload})\n\nconst endGame = () => ({type: 'EXIT_GAME'})\n\nconst playersList = (payload) => ({type: 'GET_PLAYERS_LIST', payload})\n\nexport const getPlayersList = (data) => {\n    return (dispatch) => {\n        dispatch(playersList(data))\n    }\n}\nexport const invitePlayer = (socket, opponent) => {\n    return (dispatch) => {\n        dispatch(waitForOpponent())\n        socket.emit('invite', opponent, (data) => {\n        })\n        socket.emit('readyForGame')\n        dispatch(playerReady())\n\n    }\n}\nexport const gotInvite = (data) => {\n    return (dispatch) => {\n        dispatch(gotOpponent(data))\n    }\n}\nexport const readyForGame =(socket) => {\n    return (dispatch) => {\n        dispatch(playerReady())\n        socket.emit('readyForGame')\n    }\n}\nexport const nextMovie = (socket, data)=> {\n    return (dispatch) => {\n        dispatch(waitForOpponent())\n        socket.emit('nextMovie', (data))\n    }\n}\nexport const updateScore = (data) => {\n    return (dispatch) => {\n        dispatch(sessionScoreUpdate(data))\n    }\n}\nexport const removeOpponent = (socket) => {\n    return (dispatch) => {\n        dispatch(clearOpponent())\n        dispatch(opponentCanceled())\n        socket.emit('cancelGame')\n    }\n}\nexport const canceledGame = () => {\n    return (dispatch) => {\n        dispatch(opponentCanceled())\n    }\n}\nexport const exitGame =() => {\n    return (dispatch) => {\n        dispatch(endGame())\n    }\n}\nexport const gameData =({data, score}) => {\n    return (dispatch) => {\n        if(score) dispatch(updOpponentsScore(score))\n        dispatch(getData())\n        dispatch(getDataSuccess(data))\n    }\n}\nexport const gotaWinner = (data) => {\n    return(dispatch) => {\n        dispatch(winner(data))\n    }\n}\nexport const globalScoreUpdate = (data) => {\n    return (dispatch) => {\n        dispatch(scoreUpdate(data))\n    }\n}\n\n\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport CoopGameArea from './components/CoopGameArea/CoopGameArea';\n\nclass MultiGamePage extends Component{ \n    render(){\n        const { isAuth } = this.props\n        if (!isAuth) {\n            return <Redirect to=\"/auth\" />\n        }\n        return(\n                <div className=\"wrapper\">\n                    <CoopGameArea />\n                </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n      isAuth: state.userStatus.isAuth\n    }\n  }\n \nexport default connect(mapStateToProps)(MultiGamePage)","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\nimport MainPage from './pages/Main';\nimport AuthPage from './pages/Auth';\nimport NavBar from './pages/components/NavBar/NavBar';\nimport RegPage from './pages/Register';\nimport GamePage from './pages/Game';\nimport MultiplayerGame from './pages/MultiplayerGame';\n\nconst store = configureStore()\nstore.subscribe(() => {\n  store.getState();\n});\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n        <NavBar />\n        <Switch>\n          <Redirect from=\"/\" to=\"/main\" exact/>\n          <Route path=\"/main\" component={MainPage} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route path=\"/signup\" component={RegPage} />\n          <Route path=\"/single-game\" component={GamePage} />\n          <Route path=\"/multiplayer-game\" component={MultiplayerGame} />\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}